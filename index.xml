<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Everyone Has a Story</title><link>https://BhaveshSGupta.me/</link><description>Recent content on Everyone Has a Story</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 14 Sep 2019 19:54:55 +0530</lastBuildDate><atom:link href="https://BhaveshSGupta.me/index.xml" rel="self" type="application/rss+xml"/><item><title>About</title><link>https://BhaveshSGupta.me/about/</link><pubDate>Sat, 20 Jun 2015 14:02:37 +0200</pubDate><guid>https://BhaveshSGupta.me/about/</guid><description>&lt;p>Currently working as Sr. Web Producer at &lt;a href="https://Investisdigital.com">InvestisDigital&lt;/a>. I am an OpenSource Enthusiast who is trying to contribute to make people&amp;rsquo;s life better. I love to program and I am learning how to develop better. I have tried my hands on several technologies whenever I got a chance to work with them. I have fare amount of experience Front-End Web Technologies HTML5, CSS3, JavaScript, JQuery. I try to learn bits about languages/technologies whenever I can.&lt;/p></description></item><item><title>Convert Excel to Json</title><link>https://BhaveshSGupta.me/blog/convert-excel-to-json/</link><pubDate>Sat, 14 Sep 2019 19:54:55 +0530</pubDate><guid>https://BhaveshSGupta.me/blog/convert-excel-to-json/</guid><description>&lt;p>Some time in our projects we need data in json files(mostly web projects). But collecting and managing data in json files is harder(At least this is what I feel) compared to excel. I had recently ran into a similar situation where I need some data. Data is going to be provided by a non-technical person/client. And there going to be several rounds of it.&lt;/p>
&lt;p>So I was looking for options what can be done here, where I found several online tools which could be used for same. But I don&amp;rsquo;t want to use that because of course privacy. I don&amp;rsquo;t want to upload an excel file to a unknown application which would process it server side give me results.&lt;/p>
&lt;p>My search ended upon &lt;a href="https://www.npmjs.com/package/simple-excel-to-json">this&lt;/a>. I found this nodejs module which was supper easy to use which would read your excel file and return a json object. So I created a small nodejs project which help me achieving solution to the problem.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="kd">var&lt;/span> &lt;span class="nx">parser&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;simple-excel-to-json&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">doc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">parser&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">parseXls2Json&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;sample.xlsx&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">isNested&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">true&lt;/span> &lt;span class="p">});&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">fs&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;fs&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">fs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">writeFileSync&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;sample.json&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nx">JSON&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">stringify&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">doc&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="kd">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;There was an error!&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>So &lt;a href="https://github.com/BhaveshSGupta/excel-to-json-demo">here&lt;/a> is a repository link to source code. To run this you would need nodejs in your system.&lt;/p>
&lt;p>You would need to a &lt;code>npm install&lt;/code> and &lt;code>node index.js&lt;/code> to this working.&lt;/p></description></item><item><title>Another Attempt at Wag3</title><link>https://BhaveshSGupta.me/blog/another-attempt-at-wag3/</link><pubDate>Sun, 25 Aug 2019 16:57:46 +0530</pubDate><guid>https://BhaveshSGupta.me/blog/another-attempt-at-wag3/</guid><description>&lt;p>Until now we had done as of following code. We would create couples of more functions which would help us in managing our application. As discussed earlier we would now we creating different directories and files present inside .git directory along with directory itself. More or less we would something like following directory structure after doing &lt;code>wag init&lt;/code>&lt;/p>
&lt;ul>
&lt;li>.git is the git directory itself, which contains:
&lt;ul>
&lt;li>.git/objects/ : the object store, which we’ll introduce in the next section.&lt;/li>
&lt;li>.git/refs/ the reference store, which we’ll discuss . It contains two subdirectories, heads and tags.&lt;/li>
&lt;li>.git/HEAD, a reference to the current HEAD (more on that later!)&lt;/li>
&lt;li>.git/config, the repository’s configuration file.&lt;/li>
&lt;li>.git/description, the repository’s description file.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="kn">import&lt;/span> &lt;span class="nn">sys&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">argparse&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">os&lt;/span>
&lt;span class="n">argparser&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">argparse&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ArgumentParser&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">description&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;Another Content Tracker&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">argsubparsers&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">argparser&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add_subparsers&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">title&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;Commands&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">dest&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;command&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">argsubparsers&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">required&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">True&lt;/span>
&lt;span class="n">argsp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">argsubparsers&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add_parser&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="s2">&amp;#34;init&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">help&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;Initialize a new, empty repository.&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">argsp&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add_argument&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;path&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">metavar&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;directory&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">nargs&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;?&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">default&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;.&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">help&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;Where to create the repository.&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">sys&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">:]):&lt;/span>
&lt;span class="n">args&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">argparser&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parse_args&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">command&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;init&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">cmd_init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">cmd_init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">repo_create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">GitRepository&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">object&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;A git repository&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="n">worktree&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">None&lt;/span>
&lt;span class="n">gitdir&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">None&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">path&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">force&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="bp">False&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">worktree&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">path&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">gitdir&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;.git&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">repo_create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;Create a new repository at path.&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="n">repo&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">GitRepository&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># We check whether there exsits a path of worktree&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">exists&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">repo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">worktree&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="c1"># if path exsits its a directory or not&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">isdir&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">repo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">worktree&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">raise&lt;/span> &lt;span class="ne">Exception&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">%s&lt;/span>&lt;span class="s2"> is not a directory!&amp;#34;&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="n">path&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># if path exsits its empty or not&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">listdir&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">repo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">worktree&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">raise&lt;/span> &lt;span class="ne">Exception&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">%s&lt;/span>&lt;span class="s2"> is not empty!&amp;#34;&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="n">path&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="c1"># Create directory as nothing exist with same path&lt;/span>
&lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">makedirs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">repo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">worktree&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Now let&amp;rsquo;s create function which would gives us path of directory after verifying that the directory exist and if it doesn&amp;rsquo;t it should gives us an error. We would also require mechanism to check whether we need to create the directory or not if it doesn&amp;rsquo;t exists.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="k">def&lt;/span> &lt;span class="nf">repo_dir&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">repo&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">mkdir&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="bp">False&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="c1"># repo is for our GitRepository object as we want to work with repository.&lt;/span>
&lt;span class="c1"># *path is the path we want to check&lt;/span>
&lt;span class="c1"># mkdir to specify whether we want to create directory or not.&lt;/span>
&lt;span class="c1"># this function would give us path we want to check if it exist or not&lt;/span>
&lt;span class="n">path&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">repo_path&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">repo&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># This would check whether path exists and if it does then it would check if it is a directory or not&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">exists&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">isdir&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="p">)):&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">path&lt;/span>
&lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">raise&lt;/span> &lt;span class="ne">Exception&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Not a directory &lt;/span>&lt;span class="si">%s&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="n">path&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># This would check if we need to create directory as it doesn&amp;#39;t exists&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">mkdir&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">makedirs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">path&lt;/span>
&lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="bp">None&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">repo_path&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">repo&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="c1"># This would return us path under repository git directory&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">repo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">gitdir&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>We have created another &lt;code>repo_path&lt;/code> function which is gives us path based on our git directory. Now we would add for these in our &lt;code>repo_create()&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="k">def&lt;/span> &lt;span class="nf">repo_create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;Create a new repository at path.&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="n">repo&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">GitRepository&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># We check whether there exists a path of worktree&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">exists&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">repo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">worktree&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="c1"># if path exists its a directory or not&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">isdir&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">repo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">worktree&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">raise&lt;/span> &lt;span class="ne">Exception&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">%s&lt;/span>&lt;span class="s2"> is not a directory!&amp;#34;&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="n">path&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># if path exists its empty or not&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">listdir&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">repo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">worktree&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">raise&lt;/span> &lt;span class="ne">Exception&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">%s&lt;/span>&lt;span class="s2"> is not empty!&amp;#34;&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="n">path&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="c1"># Create directory as nothing exist with same path&lt;/span>
&lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">makedirs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">repo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">worktree&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">repo_path&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">repo&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;branches&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">assert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">repo_dir&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">repo&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;branches&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">mkdir&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="bp">True&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="k">assert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">repo_dir&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">repo&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;objects&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">mkdir&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="bp">True&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="k">assert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">repo_dir&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">repo&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;refs&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;tags&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">mkdir&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="bp">True&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="k">assert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">repo_dir&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">repo&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;refs&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;heads&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">mkdir&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="bp">True&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Above would create &lt;code>.git&lt;/code> directory with &lt;code>braches&lt;/code>, &lt;code>objects&lt;/code> and &lt;code>refs&lt;/code> directory with &lt;code>tags&lt;/code> and &lt;code>heads&lt;/code> under it. It would look as follows:&lt;/p>
&lt;ul>
&lt;li>.git
&lt;ul>
&lt;li>objects&lt;/li>
&lt;li>branches&lt;/li>
&lt;li>refs
&lt;ul>
&lt;li>tags&lt;/li>
&lt;li>heads&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;code>Assert()&lt;/code> helps us to identify that all these directories are created. If there is some issue and we return None from function it would show assertation error.&lt;/p>
&lt;p>Besides directories there are few files which are also created when you do a git init, so those also needs to be created when we &lt;code>wag init&lt;/code>. Those files are config, HEAD and description others too but for now we would concentrate on these three.&lt;/p>
&lt;p>Now these files could be created anywhere and that directory may or may not exist so we would so let&amp;rsquo;s create a function which would create these directories if require. Also lets open description file and write &amp;ldquo;Unnamed repository; edit this file &amp;lsquo;description&amp;rsquo; to name the repository.&amp;rdquo; into that. We need to change this in our &lt;code>repo_create&lt;/code> function&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="k">def&lt;/span> &lt;span class="nf">repo_create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;Create a new repository at path.&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="n">repo&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">GitRepository&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># We check whether there exists a path of worktree&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">exists&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">repo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">worktree&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="c1"># if path exists its a directory or not&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">isdir&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">repo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">worktree&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">raise&lt;/span> &lt;span class="ne">Exception&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">%s&lt;/span>&lt;span class="s2"> is not a directory!&amp;#34;&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="n">path&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># if path exists its empty or not&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">listdir&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">repo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">worktree&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">raise&lt;/span> &lt;span class="ne">Exception&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">%s&lt;/span>&lt;span class="s2"> is not empty!&amp;#34;&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="n">path&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="c1"># Create directory as nothing exist with same path&lt;/span>
&lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">makedirs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">repo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">worktree&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">repo_path&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">repo&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;branches&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">assert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">repo_dir&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">repo&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;branches&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">mkdir&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="bp">True&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="k">assert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">repo_dir&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">repo&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;objects&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">mkdir&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="bp">True&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="k">assert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">repo_dir&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">repo&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;refs&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;tags&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">mkdir&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="bp">True&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="k">assert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">repo_dir&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">repo&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;refs&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;heads&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">mkdir&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="bp">True&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="k">with&lt;/span> &lt;span class="nb">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">repo_file&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">repo&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;description&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="s2">&amp;#34;w&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">f&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Unnamed repository; edit this file &amp;#39;description&amp;#39; to name the repository.&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">repo_file&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">repo&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">mkdir&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="bp">False&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">repo_dir&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">repo&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="p">[:&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">mkdir&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">mkdir&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">repo_path&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">repo&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>For config file we would need to use config parser module which would create a config file in Microsoft’s INI format. So first let&amp;rsquo;s create a function which would create default config. We would need to import this module with below modules.
In default config there are thing fields,&lt;/p>
&lt;ul>
&lt;li>repositoryformatversion whose value we would set to 0, for more info visit &lt;a href="https://github.com/git/git/blob/00a09d57eb8a041e6a6b0470c53533719c049bab/Documentation/technical/repository-version.txt">here&lt;/a>. Our program would be compatible with only 0 format version only&lt;/li>
&lt;li>filemode whose value would be set to false, it disables tacking of file mode changes&lt;/li>
&lt;li>bare whose value would be false. It indicates that this repository has a work. Git supports an optional worktree key which indicates location of the worktree, if not &lt;code>..&lt;/code>(parent repository)&lt;/li>
&lt;/ul>
&lt;p>All these keys are under core section so first we would add section and then set this config.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="k">def&lt;/span> &lt;span class="nf">repo_default_config&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="n">ret&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">configparser&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ConfigParser&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">ret&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add_section&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;core&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">ret&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;core&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;repositoryformatversion&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;0&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">ret&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;core&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;filemode&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;false&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">ret&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;core&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;bare&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;false&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">ret&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Now let&amp;rsquo;s update our &lt;code>repo_create&lt;/code> function to create config and Head file.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="k">def&lt;/span> &lt;span class="nf">repo_create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;Create a new repository at path.&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="n">repo&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">GitRepository&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># We check whether there exsits a path of worktree&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">exists&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">repo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">worktree&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="c1"># if path exsits its a directory or not&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">isdir&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">repo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">worktree&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">raise&lt;/span> &lt;span class="ne">Exception&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">%s&lt;/span>&lt;span class="s2"> is not a directory!&amp;#34;&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="n">path&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># if path exsits its empty or not&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">listdir&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">repo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">worktree&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">raise&lt;/span> &lt;span class="ne">Exception&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">%s&lt;/span>&lt;span class="s2"> is not empty!&amp;#34;&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="n">path&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="c1"># Create directory as nothing exist with same path&lt;/span>
&lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">makedirs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">repo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">worktree&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">repo_path&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">repo&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;branches&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">assert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">repo_dir&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">repo&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;branches&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">mkdir&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="bp">True&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="k">assert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">repo_dir&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">repo&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;objects&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">mkdir&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="bp">True&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="k">assert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">repo_dir&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">repo&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;refs&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;tags&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">mkdir&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="bp">True&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="k">assert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">repo_dir&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">repo&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;refs&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;heads&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">mkdir&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="bp">True&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="k">with&lt;/span> &lt;span class="nb">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">repo_file&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">repo&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;description&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="s2">&amp;#34;w&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">f&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Unnamed repository; edit this file &amp;#39;description&amp;#39; to name the repository.&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">with&lt;/span> &lt;span class="nb">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">repo_file&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">repo&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;HEAD&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="s2">&amp;#34;w&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">f&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;ref: refs/heads/master&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">with&lt;/span> &lt;span class="nb">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">repo_file&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">repo&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;config&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="s2">&amp;#34;w&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">config&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">repo_default_config&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">config&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>This would complete our init method. YAY&lt;/p></description></item><item><title>Another Attempt at Wag 2</title><link>https://BhaveshSGupta.me/blog/another-attempt-at-wag-2/</link><pubDate>Sat, 24 Aug 2019 15:32:32 +0530</pubDate><guid>https://BhaveshSGupta.me/blog/another-attempt-at-wag-2/</guid><description>&lt;p>Last time we had created &lt;code>cmd_init(args)&lt;/code> function. We add more functionality to cmd_init(args).&lt;/p>
&lt;p>This was our code till last time.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="kn">import&lt;/span> &lt;span class="nn">sys&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">argparse&lt;/span>
&lt;span class="n">argparser&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">argparse&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ArgumentParser&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">description&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;Another Content Tracker&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">argsubparsers&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">argparser&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add_subparsers&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">title&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;Commands&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">dest&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;command&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">argsubparsers&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">required&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">True&lt;/span>
&lt;span class="n">argsp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">argsubparsers&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add_parser&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;init&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">help&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;Initialize a new, empty repository.&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">argsp&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add_argument&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;path&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">metavar&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;directory&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">nargs&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;?&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">default&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;.&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">help&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;Where to create the repository.&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">sys&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">:]):&lt;/span>
&lt;span class="n">args&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">argparser&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parse_args&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">command&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;init&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">cmd_init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">cmd_init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Hello from init&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>We had added an argument to your sub parser called path. If the value of path is not specified it would be &amp;lsquo;.&amp;rsquo; current directory or it would whatever specified. This would help us&lt;/p>
&lt;p>A repository in git is consisted to two things a work tree where we have our files are there for version control and the git directory i.e. &lt;code>.git&lt;/code> directory where Git stores its own data. In regular practice our work tree is a regular directory and git directory is child of that directory. Git supports all cases also our program would work in this case only.&lt;/p>
&lt;p>For any command we run related to git there would be in git repo. So we create an object which would help us manage things. We would be working with lot of files we need to import another python module os.&lt;/p>
&lt;p>So let&amp;rsquo;s create a class call GitRepository who&amp;rsquo;s object would give us worktree directory and .git directory. Later when we would create other commands into our code we can use this to check whether we are executing commands on a valid repository or not.&lt;/p>
&lt;!--
For creating a Repository object we need to check few things.
* There is directory in which we have our work tree and a subdirectory called `` `.git` ``
* In `` `.git` ` ` we would store several things which would even include a config file at ` ` `.git/config` `` and see that core.repositoryformatversion is 0 if the repository is already created. For more on this read [here](https://github.com/git/git/blob/00a09d57eb8a041e6a6b0470c53533719c049bab/Documentation/technical/repository-version.txt)
Config file it's a INI file and to read it we would need to import another python module configparser, which would help us here. We would also need os module to work with files.
So first let's import configparser and os, start creating a class to get this repository object. -->
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="k">class&lt;/span> &lt;span class="nc">GitRepository&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">object&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;A git repository&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="n">worktree&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">None&lt;/span>
&lt;span class="n">gitdir&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">None&lt;/span>
&lt;span class="n">conf&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">None&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">path&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">worktree&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">path&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">gitdir&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;.git&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>We would create another function for our init command called &lt;code>`repo_create(path)`&lt;/code> which would take our path argument from init.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="k">def&lt;/span> &lt;span class="nf">cmd_init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">repo_create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">repo_create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;Create a new repository at path.&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="n">repo&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">GitRepository&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">repo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">worktree&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">repo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">gitdir&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Now when you &lt;code>./wag init&lt;/code> you would get something like &lt;code>. ./.git&lt;/code> and if you do &lt;code>./wag init test&lt;/code> and you would get &lt;code>test test/.git&lt;/code>. So this would help us in creating directories.&lt;/p>
&lt;p>As we have worktree path and git directory path we can check if worktree exist, if it doesn&amp;rsquo;t then we can create a directory. This would be used for creating things with &lt;code>./wag init test&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="k">def&lt;/span> &lt;span class="nf">repo_create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;Create a new repository at path.&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="n">repo&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">GitRepository&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">exists&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">repo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">worktree&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="c1"># We check whether there exists a path of worktree&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">isdir&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">repo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">worktree&lt;/span>&lt;span class="p">):&lt;/span>&lt;span class="c1"># if path exists it is a directory or not&lt;/span>
&lt;span class="k">raise&lt;/span> &lt;span class="ne">Exception&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">%s&lt;/span>&lt;span class="s2"> is not a directory!&amp;#34;&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="n">path&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">listdir&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">repo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">worktree&lt;/span>&lt;span class="p">):&lt;/span>&lt;span class="c1"># if path exsits its empty or not&lt;/span>
&lt;span class="k">raise&lt;/span> &lt;span class="ne">Exception&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">%s&lt;/span>&lt;span class="s2"> is not empty!&amp;#34;&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="n">path&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">makedirs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">repo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">worktree&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># Create directory as nothing exist with same path&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>In wag, we would only allow to init git if already existing repository is empty otherwise we won&amp;rsquo;t. Now we need to create &lt;code>.git&lt;/code> directory and other directories inside it.&lt;/p></description></item><item><title>Another Attempt to write a git</title><link>https://BhaveshSGupta.me/blog/another-attempt-at-wag/</link><pubDate>Thu, 22 Aug 2019 20:50:56 +0530</pubDate><guid>https://BhaveshSGupta.me/blog/another-attempt-at-wag/</guid><description>&lt;h2 id="second-try">Second Try&lt;/h2>
&lt;p>We would be trying to create a mini git clone from this tutorial. I aspect this to go long. In general git is awesome source code manager which is wieldy use.&lt;/p>
&lt;p>So first we would be creating a lib file and executing file.&lt;/p>
&lt;p>Let&amp;rsquo;s create a file called wag which would have following code.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="ch">#!/usr/bin/env python3&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">libwag&lt;/span>
&lt;span class="n">libwag&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Then we would create another file which would be libwag.py with just a main function in it.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="k">def&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="k">print&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Hello from libwag&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>We would then make our wag file executable by &lt;code>shell chmod +x wag&lt;/code>. Now you can run wag by&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">./wag
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>In output screen you would get &amp;ldquo;Hello from libwag&amp;rdquo;.&lt;/p>
&lt;p>We would be using several inbuilt module which are available in python to achieve working things.&lt;/p>
&lt;p>First we would be importing a module called argparse. As per docs of argparse, it is a parser for command-line options, arguments and sub-command.&lt;/p>
&lt;p>We would be importing sys module for getting arguments passed to program.&lt;/p>
&lt;p>Our write a git, would be command line application which would work similar to git. For example for initiating we do &lt;code>git init&lt;/code> here we would do &lt;code>wag init&lt;/code>.&lt;/p>
&lt;p>Note: To understand things better it would be better(not required), if you read documentation of argparse and checkout tutorial given in documentation.&lt;/p>
&lt;p>We’ll need to handle subcommands (as in git: init, commit, etc.) In argparse language, these are called “subparsers”. In our current program it would always take one subparsers. Our argument would get stored in a string name command. And based on this string we would call different functions which we would require for our program to work.&lt;/p>
&lt;p>Note: We would need to add each parser/command to our subparser so that our parser can dected whether the command we are passing is valid or not.&lt;/p>
&lt;p>After all of above our code would look like below:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="kn">import&lt;/span> &lt;span class="nn">sys&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">argparse&lt;/span>
&lt;span class="n">argparser&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">argparse&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ArgumentParser&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">description&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;Another Content Tracker&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">argsubparsers&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">argparser&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add_subparsers&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">title&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;Commands&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">dest&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;command&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">argsubparsers&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">required&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">True&lt;/span>
&lt;span class="n">argsp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">argsubparsers&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add_parser&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;init&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">help&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;Initialize a new, empty repository.&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">sys&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">:]):&lt;/span>
&lt;span class="n">args&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">argparser&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parse_args&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">command&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Hello from libwag&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>If you would try to run above code as &lt;code>./wag init&lt;/code> it would print init and &amp;ldquo;Hello from libwag&amp;rdquo;. We would have multiple commands so, we would write a control flow to call different functions we make.&lt;/p>
&lt;p>To keep things consistent we would use same nomenclature to define our functions. In our main function we would use a control flow statement then call function as per requirement. We would need to define the function we are calling.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="k">def&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">sys&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">:]):&lt;/span>
&lt;span class="n">args&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">argparser&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parse_args&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">command&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;init&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">cmd_init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">cmd_init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Hello from init&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Now when we would call init it would call our &lt;code>cmd_init(args)&lt;/code> method and do things for now just print &amp;ldquo;Hello from init&amp;rdquo;.&lt;/p>
&lt;p>As we know(&amp;ldquo;I just came to know this today.&amp;quot;) &lt;code>git init&lt;/code> also takes path as an optional argument and if path is not passed it would initialize current directory, if path is passed it would create that repository if it doesn&amp;rsquo;t exists. And initialize repo with &lt;code>.git&lt;/code> directory.&lt;/p>
&lt;p>We would add argument to our init command. Where we had defined our init command we would be adding code for to add an argument.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="n">argsp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">argsubparsers&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add_parser&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;init&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">help&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;Initialize a new, empty repository.&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">argsp&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add_argument&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;path&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">metavar&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;directory&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">nargs&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;?&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">default&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;.&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">help&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;Where to create the repository.&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>An attempt to Write Yourself a Git</title><link>https://BhaveshSGupta.me/blog/an-attempt-to-write-yourself-a-git/</link><pubDate>Mon, 19 Aug 2019 21:13:07 +0530</pubDate><guid>https://BhaveshSGupta.me/blog/an-attempt-to-write-yourself-a-git/</guid><description>&lt;p>So I tried to follow &lt;a href="https://wyag.thb.lt/">wyag&lt;/a> at &lt;a href="https://github.com/BhaveshSGupta/wyag">here&lt;/a> but I was not able to. This tutorial is great but I was not able follow it because may be I am not still not much clear with python and how it works. So after much thought I have decided that I would try to create my own blog post series where I would take learnings from &lt;a href="https://wyag.thb.lt/">wyag&lt;/a> and try to do it in my way.&lt;/p>
&lt;p>Our first step would be to create repository and write init function. And then we would see how we can follow along.&lt;/p></description></item><item><title>Learning python through pym 14-08-2019</title><link>https://BhaveshSGupta.me/blog/learning-python-through-pym-14-08-2019/</link><pubDate>Wed, 14 Aug 2019 16:57:26 +0530</pubDate><guid>https://BhaveshSGupta.me/blog/learning-python-through-pym-14-08-2019/</guid><description>&lt;h2 id="day-4">Day 4&lt;/h2>
&lt;p>PS: These are notes, there could be grammar error and spelling errors.&lt;/p>
&lt;h3 id="for-loops">for loops&lt;/h3>
&lt;p>For loop over a list goes as follows:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;Fedora&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;is&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;powerful&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="o">...&lt;/span> &lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="c1"># these ... are automatically created by python interpreter&lt;/span>
&lt;span class="n">Fedora&lt;/span>
&lt;span class="ow">is&lt;/span>
&lt;span class="n">powerful&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="range-function">range() function&lt;/h3>
&lt;p>range function creates lists based on parameter passed in function``py&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">list&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="c1"># when two numbers are passed n,j List starts at n ends at j-1&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">list&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">15&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="c1"># when three numbers are passed n,j,k. List starts at n ends at j after stepping at every k steps&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">13&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">list&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="c1"># when only single number n is passed list starts from 0 and ends after n elements&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">9&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="continue-statement">Continue statement&lt;/h3>
&lt;p>Just like break is use to break loop, continue is used to continue loop towards iteration without further execution
A combined example.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="ch">#!/usr/bin/env python3&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="bp">True&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">input&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Please enter an Integer: &amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">continue&lt;/span> &lt;span class="c1"># this will take the execution back to the starting of the loop&lt;/span>
&lt;span class="k">elif&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">break&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Square is &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">**&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Goodbye&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="data-structures">Data Structures&lt;/h2>
&lt;h3 id="lists">Lists&lt;/h3>
&lt;p>Few other things with lists:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="c1"># to insert a new element in list&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">23&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">45&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">3434&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">43624356&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">234&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">45&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="mi">23&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">45&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">3434&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">43624356&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">234&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">45&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="c1"># to inset at particular position we have to pass position along. First would be position then would be element&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">insert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">23&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">45&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">3434&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">43624356&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">234&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">45&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="c1"># to count number of occurrences of a element&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">45&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Same way we have &lt;code>.reverse&lt;/code>, &lt;code>.remove&lt;/code> using append we can append another list to existing list as a element of the list&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">45&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">56&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">90&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="mi">45&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">43624356&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">3434&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">45&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">23&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">111&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">45&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">56&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">90&lt;/span>&lt;span class="p">]]&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>There is another method call &lt;code>.extend&lt;/code> which would add element of second list as element of new list&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">extend&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">#To add the values of b not the b itself&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="mi">45&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">43624356&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">3434&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">45&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">23&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">111&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">45&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">56&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">90&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="mi">45&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">56&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">90&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c1"># here in a[n] value of n is -1 so it would give last element&lt;/span>
&lt;span class="mi">90&lt;/span>
&lt;span class="c1"># to remove element which was we would pass same list or sublist to remove it.&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">remove&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="mi">45&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">43624356&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">3434&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">45&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">23&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">111&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">45&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">56&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">90&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="c1"># .sort is use to sort list if list is sortable means elements are comparable.&lt;/span>
&lt;span class="c1"># del can also be used to delete a element from list&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="k">del&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">3434&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">23&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">45&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">45&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">45&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">56&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">90&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">111&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="using-lists-as-stack-and-queue">Using lists as stack and queue&lt;/h3>
&lt;p>Stacks work as LIFO(Last In First Out) and queue work on FIFO(First In First Out)&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="c1"># for Lifo and fifo everything would be appended at the end of list we would use append.&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">34&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">34&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="c1"># while removing element we would remove using pop&lt;/span>
&lt;span class="c1"># for removing element in lifo we would use .pop() without any parameter so that it would remove last element&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">pop&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="mi">34&lt;/span>
&lt;span class="c1"># for fifo or queue where oldest element is removed first we use .pop(0)&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">pop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="mi">1&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Note: .pop removes element and return removed element while append just add element doesn&amp;rsquo;t returns anything&lt;/p></description></item><item><title>Learning python through pym 13-08-2019</title><link>https://BhaveshSGupta.me/blog/learning-python-through-pym-13-08-2019/</link><pubDate>Tue, 13 Aug 2019 20:57:26 +0530</pubDate><guid>https://BhaveshSGupta.me/blog/learning-python-through-pym-13-08-2019/</guid><description>&lt;h2 id="day-3">Day 3&lt;/h2>
&lt;p>PS: These are notes, there could be grammar error and spelling errors.&lt;/p>
&lt;p>Last time we were just starting with If else, the control flow,&lt;/p>
&lt;h2 id="if-else--the-control-flow">if-else , the control flow&lt;/h2>
&lt;p>Control flow is used when we need to do some decisive task&lt;/p>
&lt;h3 id="if-if-else-if-elif-else-statement">if, if else, if elif else statement&lt;/h3>
&lt;p>If statement is simple as it is other language&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="k">if&lt;/span> &lt;span class="n">expression&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">do&lt;/span> &lt;span class="n">this&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="k">if&lt;/span> &lt;span class="n">expression&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">do&lt;/span> &lt;span class="n">this&lt;/span>
&lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">do&lt;/span> &lt;span class="n">this&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="k">if&lt;/span> &lt;span class="n">expression&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">do&lt;/span> &lt;span class="n">this&lt;/span>
&lt;span class="k">elif&lt;/span> &lt;span class="n">expression&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">do&lt;/span> &lt;span class="n">this&lt;/span>
&lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">do&lt;/span> &lt;span class="n">this&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Things to note:&lt;/p>
&lt;ul>
&lt;li>&amp;lsquo;:&amp;rsquo; is must&lt;/li>
&lt;li>Indentation must be proper.&lt;/li>
&lt;li>if value is going to be true or false check it directly in if or elif expression without comparison operators.&lt;/li>
&lt;/ul>
&lt;h2 id="looping">Looping&lt;/h2>
&lt;p>Looping is used whenever you need to do repetitive task with some condition&lt;/p>
&lt;h3 id="while-loop">while loop&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="k">while&lt;/span> &lt;span class="n">condition&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">statement1&lt;/span>
&lt;span class="n">statement2&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>while loop we execute until condition is meet.&lt;/p>
&lt;h3 id="generating-fibonacci-using-while">generating fibonacci using while&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="ch">#!/usr/bin/env python3&lt;/span>
&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">b&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>By default print always prints in new line. We can change end by pass it into print function something like &lt;code>print(b, end=' ')&lt;/code>. This would not print \n &amp;lt;- newline character after every print statement instead it would print space.&lt;/p>
&lt;h3 id="break">break&lt;/h3>
&lt;p>break is used to break at loop. It could be because some conditions matched or whatever could be the case.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="k">if&lt;/span> &lt;span class="n">term&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mf">0.0001&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">break&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>This means if the value of term is less than 0.0001 then get out of the loop. If this statement is kept inside a loop.&lt;/p>
&lt;h3 id="decorating-prints">Decorating prints&lt;/h3>
&lt;p>We can print space separator&amp;rsquo;s and character separators using print. We can multiply string or character with a number to print that n number of times. for example&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;-&amp;#34;&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">50&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="o">--------------------------------------------------&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;*&amp;#34;&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="o">**********&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;#&amp;#34;&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">20&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">####################&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;--&amp;#34;&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">20&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="o">----------------------------------------&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;-&amp;#34;&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">40&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="o">----------------------------------------&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="draw-the-pattern">Draw the pattern&lt;/h3>
&lt;p>One of the question which has haunt several to be under-graduate students(some graduates too) is drawing given pattern.
I remember people using space and print statement to print exact same 5 line pattern then fighting with teacher to say When did you say we had to take input :D. Moving ahead.&lt;/p>
&lt;p>So patterns in python becomes easy(even for those student) suppose we want below pattern:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="o">*****&lt;/span>
&lt;span class="o">****&lt;/span>
&lt;span class="o">***&lt;/span>
&lt;span class="o">**&lt;/span>
&lt;span class="o">*&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>In python what we do is we take an input say draw 5 lines.
we would print two things number of spaces and stars. Need to decrease number of stars and increase number of space.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="ch">#!/usr/bin/env python3&lt;/span>
&lt;span class="n">row&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">input&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Enter the number of rows: &amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">row&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;*&amp;#34;&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">n&lt;/span>
&lt;span class="c1"># This would store 5 star at start into variable x and keep decrease as -1 at bottom&lt;/span>
&lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34; &amp;#34;&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">row&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># This would store spaces as row - n initially value of both is same of there would 0 spaces and then they would keep increasing&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">y&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># This would print first space then start for that iteration&lt;/span>
&lt;span class="n">n&lt;/span> &lt;span class="o">-=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="lists">Lists&lt;/h3>
&lt;p>Lists is similar to arrays in js.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">342&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">223&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;India&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;Fedora&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">342&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">223&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;India&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;Fedora&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="c1"># nth element in list&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="mi">1&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="s1">&amp;#39;Fedora&amp;#39;&lt;/span>
&lt;span class="c1"># -nth element in list, that is nth element from end of list&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="s1">&amp;#39;Fedora&amp;#39;&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="s1">&amp;#39;India&amp;#39;&lt;/span>
&lt;span class="c1"># n:m would return from n to mth element to list not including mth element.&lt;/span>
&lt;span class="c1"># we can either side as blank. which would consider start and end of list&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">342&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">223&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;India&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="mi">223&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[:&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">342&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">223&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="c1"># Below we are using two :: which would work as [n:e:k], from nth to eth element jumping k elements. So if n is 0 and k is 2 then first element would be 0th then 2nd then 4th. and so on.&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">223&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;Fedora&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="c1"># to check whether value exists in list we can use &amp;#39;in&amp;#39; operator&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">a&lt;/span>
&lt;span class="bp">True&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">a&lt;/span>
&lt;span class="bp">False&lt;/span>
&lt;span class="c1"># len would give length in a&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="mi">3&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>To check list is empty or not we use following code.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="k">if&lt;/span> &lt;span class="n">list_name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="c1"># This means the list is not empty&lt;/span>
&lt;span class="k">pass&lt;/span>
&lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="c1"># This means the list is empty&lt;/span>
&lt;span class="k">pass&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Have continue from for loop tomorrow :)&lt;/p></description></item><item><title>Learning python through pym 12-08-2019</title><link>https://BhaveshSGupta.me/blog/learning-python-through-pym-12-08-2019/</link><pubDate>Mon, 12 Aug 2019 20:57:26 +0530</pubDate><guid>https://BhaveshSGupta.me/blog/learning-python-through-pym-12-08-2019/</guid><description>&lt;h2 id="day-2">Day 2&lt;/h2>
&lt;p>PS: These are notes, there could be grammar error and spelling errors.&lt;/p>
&lt;p>Last time had got until here,&lt;/p>
&lt;p>We don&amp;rsquo;t need specify data type with python something similar to javascript where we use var for every type of variable.(const and let are new ES6 standards, although they are not new but new)&lt;/p>
&lt;p>So basically&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>
&lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mf">1.0&lt;/span>
&lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;test&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>in above a become integer, b becomes float and c becomes string.&lt;/p>
&lt;h3 id="reading-input-from-the-keyboard">Reading input from the Keyboard&lt;/h3>
&lt;p>For taking input from client we can &lt;code> input(&amp;quot;string to show while taking input&amp;quot;)&lt;/code>. PS: while taking input it would always be strings similar to command line input in C. So we would type cast it into required datatype. For example integer or float. As it is already string we don&amp;rsquo;t need to typecast if we need a string.&lt;/p>
&lt;h3 id="some-mathematical-operations-bodmas">Some mathematical operations BODMAS&lt;/h3>
&lt;p>python operations would follow BODMAS, and we can evaluate any operations as follows:
We would create si.py file with below text.
Please note &lt;code>#!/usr/bin/env python3&lt;/code> is very important line without which you would get an error in your code while running file.(Saying with experience)&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="ch">#!/usr/bin/env python3&lt;/span>
&lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">float&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">input&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Enter amount: &amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="n">r&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">float&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">input&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Enter Interest rate: &amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">input&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Enter period: &amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="n">si&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">100&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Simple Interest: &lt;/span>&lt;span class="si">%.2f&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="n">si&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="multiple-assignments-on-variable">Multiple assignments on variable&lt;/h3>
&lt;p>Is a way to assign value to multiple in a single go(Title itself makes it clear)&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;test&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;test1&amp;#34;&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span>
&lt;span class="s1">&amp;#39;test&amp;#39;&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">b&lt;/span>
&lt;span class="s1">&amp;#39;test1&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>A question which is always part of any programming language you learn in college, how to swap two number with and without using third variable.
In python because of multiple assignment approach things becomes easy.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;test&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;test1&amp;#34;&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span>
&lt;span class="s1">&amp;#39;test&amp;#39;&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">b&lt;/span>
&lt;span class="s1">&amp;#39;test1&amp;#39;&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">a&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span>
&lt;span class="s1">&amp;#39;test1&amp;#39;&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">b&lt;/span>
&lt;span class="s1">&amp;#39;test&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="formating-our-printed-strings">Formating our printed strings&lt;/h3>
&lt;p>There are several ways to format strings one of them we saw before in codes above:&lt;/p>
&lt;ul>
&lt;li>using %&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Simple Interest: &lt;/span>&lt;span class="si">%.2f&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="n">si&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>using .format&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;Python&amp;#34;&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">typeof&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;snake&amp;#34;&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">msg&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;{0} is {1}.&amp;#34;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">typeof&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">msg&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">Python&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="n">snake&lt;/span>&lt;span class="o">.&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>using f-strings(More to read:&lt;a href="https://www.python.org/dev/peps/pep-0498/%5D">link&lt;/a>)&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;Python&amp;#34;&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">typeof&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;snake&amp;#34;&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">msg&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="s2">&amp;#34;{name} is {typeof}.&amp;#34;&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">msg&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">Python&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="n">snake&lt;/span>&lt;span class="o">.&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>I find f-string more easy because it somewhat similar syntax to template string in javascript.&lt;/p>
&lt;h2 id="operators-and-expressions">Operators and expressions&lt;/h2>
&lt;p>In Python most of the lines you will write will be expressions. Expressions are made of operators and operands. An expression is like 2 + 3 .&lt;/p>
&lt;h3 id="operators">Operators&lt;/h3>
&lt;p>Operators are symbols which tell python interpreter to do mathematical or logical operations ie. addition, subtraction and etc.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="c1"># addition&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">3&lt;/span>
&lt;span class="mi">5&lt;/span>
&lt;span class="c1"># subtraction&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="mi">23&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">3&lt;/span>
&lt;span class="mi">20&lt;/span>
&lt;span class="c1"># divide&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="mf">22.0&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="mi">12&lt;/span>
&lt;span class="mf">1.8333333333333333&lt;/span>
&lt;span class="c1"># modulo&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="mi">14&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="mi">3&lt;/span>
&lt;span class="mi">2&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="example-why-python-is-awesome">Example why python is awesome&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="ch">#!/usr/bin/env python3&lt;/span>
&lt;span class="n">days&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">input&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Enter days: &amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Months = &lt;/span>&lt;span class="si">%d&lt;/span>&lt;span class="s2"> Days = &lt;/span>&lt;span class="si">%d&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">divmod&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">days&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">30&lt;/span>&lt;span class="p">)))&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Save above code in days.py file. When you run this file as ./days.py it would ask you to enter days you enter let say 50 then it would print both months and remaining days with single function
because the divmod(num1, num2) function returns two values , first is the division of num1 and num2 and in second the modulo of num1 and num2.&lt;/p>
&lt;p>Above code could also be written as follows the longer way:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="ch">#!/usr/bin/env python3&lt;/span>
&lt;span class="n">days&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">input&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Enter days: &amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="n">months&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">days&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="mi">30&lt;/span>
&lt;span class="n">days&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">days&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="mi">30&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Months = &lt;/span>&lt;span class="si">%d&lt;/span>&lt;span class="s2"> Days = &lt;/span>&lt;span class="si">%d&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">months&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">days&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="relational-operators">Relational Operators&lt;/h3>
&lt;p>Similar many programming language although below is reference table.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Operator&lt;/th>
&lt;th>Meaning&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&amp;lt;&lt;/td>
&lt;td>Is less than&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;lt;=&lt;/td>
&lt;td>Is less than or equal to&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;gt;&lt;/td>
&lt;td>Is greater than&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;gt;=&lt;/td>
&lt;td>Is greater than or equal to&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>==&lt;/td>
&lt;td>Is equal to&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>!=&lt;/td>
&lt;td>Is not equal to&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Some examples also:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">2&lt;/span>
&lt;span class="bp">True&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="mi">3&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">34&lt;/span>
&lt;span class="bp">False&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="mi">23&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">45&lt;/span>
&lt;span class="bp">False&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="mi">34&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">323&lt;/span>
&lt;span class="bp">True&lt;/span>
&lt;span class="c1"># &amp;#39;//&amp;#39; Gives floor division result, could be useful at many places where you would call floor function&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="mf">4.0&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="mi">3&lt;/span>
&lt;span class="mf">1.0&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="mf">4.0&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="mi">3&lt;/span>
&lt;span class="mf">1.3333333333333333&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="logical-operators">Logical Operators&lt;/h3>
&lt;p>Note for self: There is difference between logical and bitwise operators. Please don&amp;rsquo;t get confused.
In logical operators when first value is not true then it would return second value&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="mi">4&lt;/span>
&lt;span class="mi">4&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="ow">or&lt;/span> &lt;span class="mi">4&lt;/span>
&lt;span class="mi">1&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="ow">or&lt;/span> &lt;span class="mi">4&lt;/span>
&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="ow">or&lt;/span> &lt;span class="mi">4&lt;/span>
&lt;span class="mi">4&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="shorthand-operators">Shorthand Operators&lt;/h3>
&lt;p>When you perform operation on same variable where you are storing value for example.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">12&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">13&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span>
&lt;span class="mi">25&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">/=&lt;/span> &lt;span class="mi">3&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span>
&lt;span class="mf">8.333333333333334&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">26&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">32&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span>
&lt;span class="mf">840.3333333333334&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="expressions">Expressions&lt;/h3>
&lt;p>General rule whenever you write any operator give spaces between them. Evaluation of expression follows BODMAS.
For example in following code evaluation of x,y,z would be:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="ch">#!/usr/bin/env python3&lt;/span>
&lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">9&lt;/span>
&lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">12&lt;/span>
&lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">3&lt;/span>
&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="mi">3&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">z&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;X = &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Y = &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Z = &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">z&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>For x:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">9 - 12 / 3 + 3 * 2 -1
9 - 4 + 3 * 2 - 1
9 - 4 + 6 - 1
5 + 6 - 1
11 - 1
10
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>for y:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">a - b / (3 + c) * (2 - 1)
9 - 12 / (3 + 3) * (2 - 1)
9 - 12 / 6 * 1
9 - 2 * 1
9 - 2
7
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>for z:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">a - (b / (3 + c) * 2) - 1
9 - (12 / (3 + 3) * 2) - 1
9 - (12 / 6 * 2) - 1
9 - (2 * 2) - 1
9 - 4 - 1
4
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="type-conversions">Type Conversions&lt;/h3>
&lt;p>As we were saw previously we were converting string input into float and integers. So is a example of how you do it.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="nb">float&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="nb">float&lt;/span> &lt;span class="n">value&lt;/span>
&lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">integer&lt;/span> &lt;span class="n">value&lt;/span>
&lt;span class="nb">str&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">integer&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="ow">or&lt;/span> &lt;span class="nb">str&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">float&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">string&lt;/span> &lt;span class="n">representation&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>Learning python through pym 10-08-2019</title><link>https://BhaveshSGupta.me/blog/learning-python-through-pym-10-08-2019/</link><pubDate>Sat, 10 Aug 2019 17:59:22 +0530</pubDate><guid>https://BhaveshSGupta.me/blog/learning-python-through-pym-10-08-2019/</guid><description>&lt;h2 id="day-1">Day 1&lt;/h2>
&lt;h3 id="installing-python">Installing python&lt;/h3>
&lt;p>one can install python using package manager depending upon the operating system you are using.
As I have a windows machine and ubuntu using linux on windows subsystem. I can install python from &lt;a href="https://python.org">https://python.org&lt;/a>. And Ubuntu I can use below command to install python.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">sudo apt-get install python3
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="running-python">Running python&lt;/h3>
&lt;p>To run python you would call python3 which open Python interpreter. On that you can type print(&amp;ldquo;Hello World&amp;rdquo;) to run your first python code which would print Hello World in next line.&lt;/p>
&lt;p>To run python code from a file I would need to below text into a file, save suppose as hello.py&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="ch">#!/usr/bin/env python3&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Hello World!&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>The file &amp;ldquo;hello.py&amp;rdquo; needs to be executable to be run the code. If file is not executable we can do it by &lt;code>chmod +x hello.py&lt;/code>&lt;/p>
&lt;p>then we can run file by calling it as &lt;code>./hello.py&lt;/code>&lt;/p>
&lt;h3 id="white-space-and-indentation">White space and indentation&lt;/h3>
&lt;p>Whitespace and indentation should be perfect for python. If a line is not correctly indented python interpreter would Indentation error.
There are few basic rule to follow,&lt;/p>
&lt;ul>
&lt;li>Use 4 spaces for indentation&lt;/li>
&lt;li>Never mix tab and spaces&lt;/li>
&lt;li>One line blank after functions&lt;/li>
&lt;li>two lines blank after classes.&lt;/li>
&lt;li>add a space after &amp;ldquo;,&amp;rdquo; in dicts, lists, tuples and argument list and after &amp;ldquo;:&amp;rdquo; in dicts&lt;/li>
&lt;li>Spaces around assignments and comparers&lt;/li>
&lt;li>no spaces after starting and before ending () brackets/parentheses&lt;/li>
&lt;/ul>
&lt;h3 id="comments">Comments&lt;/h3>
&lt;p>In python on can write comments starting with &amp;lsquo;#&amp;rsquo;
Still gonna check whether to use ''' for multiline comments or not.
links:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://pymbook.readthedocs.io/en/latest/thebeginning.html#comments">https://pymbook.readthedocs.io/en/latest/thebeginning.html#comments&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://stackoverflow.com/questions/7696924/way-to-create-multiline-comments-in-python">https://stackoverflow.com/questions/7696924/way-to-create-multiline-comments-in-python&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://twitter.com/gvanrossum/status/112670605505077248">https://twitter.com/gvanrossum/status/112670605505077248&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="modules">Modules&lt;/h3>
&lt;p>Modules are link library which you can in import and run function from it.&lt;/p>
&lt;h3 id="keywords-and-indentifier">Keywords and Indentifier&lt;/h3>
&lt;p>As any other language there are reserved keywords in python which cannot be used as ordinary identifiers.
Below is the list of identifiers. Note: Identifiers are case sensitive they should be used with same casing.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="ow">and&lt;/span> &lt;span class="k">del&lt;/span> &lt;span class="kn">from&lt;/span> &lt;span class="nn">not&lt;/span> &lt;span class="nn">while&lt;/span>
&lt;span class="k">as&lt;/span> &lt;span class="k">elif&lt;/span> &lt;span class="k">global&lt;/span> &lt;span class="ow">or&lt;/span> &lt;span class="k">with&lt;/span>
&lt;span class="k">assert&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="k">pass&lt;/span> &lt;span class="k">yield&lt;/span>
&lt;span class="k">break&lt;/span> &lt;span class="k">except&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="nn">print&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">exec&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="k">raise&lt;/span>
&lt;span class="k">continue&lt;/span> &lt;span class="k">finally&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="k">return&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">for&lt;/span> &lt;span class="k">lambda&lt;/span> &lt;span class="k">try&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>We don&amp;rsquo;t need specify data type with python something similar to javascript where we use var for every type of variable.&lt;/p></description></item><item><title>Object-Oriented Programming With JavaScript (part 1)</title><link>https://BhaveshSGupta.me/blog/object-oriented-programming-with-javascript-part-1/</link><pubDate>Mon, 29 Jul 2019 16:56:15 +0530</pubDate><guid>https://BhaveshSGupta.me/blog/object-oriented-programming-with-javascript-part-1/</guid><description>&lt;p>I started to learn Object-oriented Programming in JavaScript using this &lt;a href="https://udemy.com/javascript-object-oriented-programming/">course&lt;/a>. This post is more of notes for the course I am taking.&lt;/p>
&lt;p>Object-oriented programming is a programming paradigm or style of programming which is centered around objects and not on functions.&lt;/p>
&lt;h2 id="four-core-concept-or-pillars-of-object-oriented-programming-language">Four core concept or pillars of Object-oriented programming language&lt;/h2>
&lt;ul>
&lt;li>Encapsulation&lt;/li>
&lt;li>Abstraction&lt;/li>
&lt;li>Inheritance&lt;/li>
&lt;li>Polymorphism&lt;/li>
&lt;/ul>
&lt;p>In Object-oriented programming we combine related functions and variables and call them as object.&lt;/p>
&lt;p>Before Object-oriented programming we had procedural programming, which divided program into set of functions.&lt;/p></description></item><item><title>More information about git log command</title><link>https://BhaveshSGupta.me/blog/more-information-about-git-log-command/</link><pubDate>Mon, 22 Jul 2019 21:59:52 +0530</pubDate><guid>https://BhaveshSGupta.me/blog/more-information-about-git-log-command/</guid><description>&lt;p>As part of home task part 2, we were asked to read about git log command. So this blog post is dedicated to that. To get more info about git log command I had gone through Git pro book available at &lt;a href="https://git-scm.com/book/en/v2/">https://git-scm.com/book/en/v2/&lt;/a>. From this book I had followed chapter &lt;a href="https://git-scm.com/book/en/v2/Git-Basics-Viewing-the-Commit-History">https://git-scm.com/book/en/v2/Git-Basics-Viewing-the-Commit-History&lt;/a> to study more about git log command.&lt;/p>
&lt;p>When &lt;code>git log&lt;/code> is used without any argument, it displays all previous commits in reverse chronological order.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Sh" data-lang="Sh">$ git log
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>We can provide following arguments with &lt;code>git log&lt;/code> command to see different outputs formats.&lt;/p>
&lt;ul>
&lt;li>When &lt;code>-n&lt;/code> is passed as an argument, where n is number it would show n number of commits.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-sh" data-lang="sh">$ git log -5
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>When &lt;code>-p&lt;/code> or &lt;code>--patch&lt;/code> is passed as an argument, it shows difference or patch output between each commit&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-sh" data-lang="sh">$ git log -p -5
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;code>--stat&lt;/code> is used get abbreviated stats of each commits&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-sh" data-lang="sh">$ git log --stat
$ git log --stat -2
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;code>--since=&amp;lt;date&amp;gt;&lt;/code> is used get logs from a particular time. One can pass months, years, days, hours etc to get log from that particular time.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-sh" data-lang="sh">$ git log --since&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;2 hours&amp;#34;&lt;/span>
$ git log --since&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;3 day&amp;#34;&lt;/span>
$ git log --since&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;10 weeks&amp;#34;&lt;/span>
$ git log --since&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;1 year&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;code>--author=&amp;lt;pattern&amp;gt;&lt;/code> is used get logs from one or many authors.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-sh" data-lang="sh">$ git log --author&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;Bhavesh&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Bonus Video: Thanks for reading the post check out &lt;a href="https://www.youtube.com/watch?v=P6jD966jzlk">this&lt;/a> video on youtube explaining how git works internally.&lt;/p></description></item><item><title>Introduction to Git and seven rules of great Git Commit Message</title><link>https://BhaveshSGupta.me/blog/introduction-to-git-and-seven-rules-of-a-great-git-commit-message/</link><pubDate>Mon, 22 Jul 2019 12:12:00 +0530</pubDate><guid>https://BhaveshSGupta.me/blog/introduction-to-git-and-seven-rules-of-a-great-git-commit-message/</guid><description>&lt;p>As part of summer training at #dgplug, Sayan took our basics to Git session. We were introduced to basics of VCS(Version Control System), need to use a VCS and introduction to Git.&lt;/p>
&lt;p>These were some of commands we learn during the session conducted over the course of two days,&lt;/p>
&lt;ul>
&lt;li>git init is used initialize Git repository
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ git init
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>git config to used to configure various Git configuration using below command one can configure their Name and Email globally for Git.
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ git config --global user.name &amp;#34;&amp;lt;Name&amp;gt;&amp;#34;
$ git config --global user.email &amp;#34;&amp;lt;email&amp;gt;&amp;#34;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>``&lt;/p>
&lt;/li>
&lt;li>git add is used to add files to stage area in Git.
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ git add helloworld.txt
$ git add .
$ git add -u
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>git status to see status of you Git repository. Whether there are changes that are still not added to stage or there are changes which are added to stage but not committed.
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ git status
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>git commit is used to commit your files from stage.
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ git commit -m &amp;#34;Snapshot 2&amp;#34;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>git diff is used to difference between current state and previous state.
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ git diff
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>git log is used to get commit logs.
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ git log
$ git log -2
$ git log -p -2
$ git log --stat
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;p>As part of home task we were asked to read &lt;a href="https://chris.beams.io/posts/git-commit/">https://chris.beams.io/posts/git-commit/&lt;/a>, which explains How to write a Git commit message.&lt;/p>
&lt;p>The seven rules of a great Git commit message are:&lt;/p>
&lt;ul>
&lt;li>Separate subject from body with a blank line&lt;/li>
&lt;li>Limit the subject line to 50 characters&lt;/li>
&lt;li>Capitalize the subject line&lt;/li>
&lt;li>Do not end the subject line with a period&lt;/li>
&lt;li>Use the imperative mood in the subject line&lt;/li>
&lt;li>Wrap the body at 72 characters&lt;/li>
&lt;li>Use the body to explain what and why vs. how&lt;/li>
&lt;/ul></description></item><item><title>Birthday Week 2019</title><link>https://BhaveshSGupta.me/blog/birthday-week-2019/</link><pubDate>Thu, 23 May 2019 19:30:00 +0000</pubDate><guid>https://BhaveshSGupta.me/blog/birthday-week-2019/</guid><description>&lt;p>So another Birthday gone as-usual. Although I am not a big celebrator expect last where we had a trip to Rishikesh on my birthday PS: I am yet to write that post.&lt;/p>
&lt;p>My celebration to birthday most part has only dinner with family. We go to a fancy hotel have some food and come back. Its almost like this has become a tradition to celebrate birthday this way.&lt;/p>
&lt;p>This post was to be published on 19th May, instead I am writing now because of my laziness I don&amp;rsquo;t often write due to fear of writing or fear of making mistakes while write. Although I plan to write and read more. :)&lt;/p></description></item><item><title>#readingeveryday 2</title><link>https://BhaveshSGupta.me/blog/readingeveryday-2/</link><pubDate>Tue, 07 Aug 2018 18:06:01 +0000</pubDate><guid>https://BhaveshSGupta.me/blog/readingeveryday-2/</guid><description>&lt;p>For &lt;a href="https://twitter.com/hashtag/readingeveryday/">#readingeveryday&lt;/a> and &lt;a href="https://zenhabits.net/reading/">link&lt;/a> Today I dedicated 15 mins to read documentation or &lt;a href="https://pymbook.readthedocs.io/en/latest/" title="pym">pym&lt;/a> python book.&lt;/p></description></item><item><title>#Readingeveryday Day-1</title><link>https://BhaveshSGupta.me/blog/readingeveryday-1/</link><pubDate>Mon, 06 Aug 2018 16:03:34 +0530</pubDate><guid>https://BhaveshSGupta.me/blog/readingeveryday-1/</guid><description>&lt;p>I have been having difficulties in making reading a habit so my friend Jason, introduce to something which is called &lt;a href="https://twitter.com/hashtag/readingeveryday/">#readingeveryday&lt;/a> challenge to start reading here is the &lt;a href="https://zenhabits.net/reading/">link&lt;/a>. So this post and goes to that today is the day 1, right now as I am starting I am reading 15 min a day. Being a slow Reader I was able to read 6 pages of the book which I am currently &amp;ldquo;Think and Grow Rich&amp;rdquo; by Napoleon Hill.&lt;/p></description></item><item><title>Reading Habit</title><link>https://BhaveshSGupta.me/blog/reading-habit/</link><pubDate>Sat, 04 Aug 2018 03:58:11 +0530</pubDate><guid>https://BhaveshSGupta.me/blog/reading-habit/</guid><description>&lt;p>I am trying to develop the habit of reading. Recently while going through #dgplug summer training, there have been discussion about having a habit to read. You write 1/10th part of what you read. Reading and writing both is considered to be one of the most important part of engineer.&lt;/p>
&lt;p>So trying to follow above I started reading books still non-technical but as a first step I did start. I do a lot of technical reading, but I never write about it so one of the task is to start writing about technical readings be it github projects I am going to try to write about it. May be my writing speed gets better with time.&lt;/p></description></item><item><title>The Man Who Stole My Laptop's Ferrari</title><link>https://BhaveshSGupta.me/blog/the-man-who-stole-my-laptops-ferrari/</link><pubDate>Sun, 29 Jul 2018 01:24:50 +0530</pubDate><guid>https://BhaveshSGupta.me/blog/the-man-who-stole-my-laptops-ferrari/</guid><description>&lt;p>So, the story goes back to 2014-2015 maybe I don&amp;rsquo;t remember exactly when my laptop stopped working on later finding it was discovered the issue was with my onboard graphics card. A brief history I had a Sony Vaio laptop with AND Radeon graphics card on it. So, it was found that it was my graphics card which is creating issue. So, I took it to many people to check what can be done this that. Everyone was like your laptop won’t work or you need to do this and that. So, a friend of mine had a friend who was into laptop/computer&amp;rsquo;s business or something of that sort. So, he said let’s talk with him after inspecting he said it would cost around 6k, and it would be done. I was happy, I was not knowing much about hardware back then (although it says same even today but I know bit more). So, I gave him my laptop to get repaired.&lt;/p>
&lt;p>So, when I got my laptop back I boot it up and was shocked to see that my processor is now Intel P4 which use to be Intel Core i5. So, I called the guy he said in Hindi and I quote &amp;ldquo;Bhaiya apko galat dikh rha hoga ek baar restart karo sahi dikhega&amp;rdquo;. I was like I know that much come-on. So, I went to his office he was like show me laptop. Then he called his repairmen saying have we changed processor for the laptop. His repairmen were like no I haven&amp;rsquo;t I have just changed motherboard and fit same processor and everything. And he added although I had seen this laptop was open previously may be someone had changed the processor during that time. And I was taken aback.&lt;/p>
&lt;p>So, a man stole my laptop&amp;rsquo;s Ferrari and I don’t know who he is.&lt;/p></description></item><item><title>Javascript uses utf16 and Html utf8, then how things work together?</title><link>https://BhaveshSGupta.me/blog/javascript-utf16-and-html-utf8-how-things-work-together/</link><pubDate>Tue, 17 Jul 2018 05:45:40 +0530</pubDate><guid>https://BhaveshSGupta.me/blog/javascript-utf16-and-html-utf8-how-things-work-together/</guid><description>&lt;p>This was part of one the discussion of dgplug discussion, that javascript uses utf-16 and html we usually use utf-8 as character encoding then how things work out.&lt;/p>
&lt;p>This was quite interesting on how things work around because of this. So I was reading around to find answers for the above question and I landed upon &lt;a href="https://stackoverflow.com/questions/12114477/how-do-i-correctly-insert-unicode-in-an-html-title-using-javascript/12114520#12114520">this&lt;/a>. And this text from the answer in the link helps understand how things work. &amp;ldquo;JavaScript string constants are parsed by the JavaScript parser. Text inside HTML tags is parsed by the HTML parser. The two languages (and, by extension, their parsers) are different, and in particular they have different ways of representing characters by character code.&amp;rdquo; Basically they won&amp;rsquo;t have issue with different character encoding as they would render same character. More over javascript parser would parse the character into the html when you use innerHTML method.&lt;/p>
&lt;p>I would have to read more and update this post again.&lt;/p></description></item><item><title>Update 17 Jul 18</title><link>https://BhaveshSGupta.me/blog/update-17-jul-18/</link><pubDate>Tue, 17 Jul 2018 05:03:32 +0530</pubDate><guid>https://BhaveshSGupta.me/blog/update-17-jul-18/</guid><description>&lt;p>This update post was actually created on 10th july, But as usual due to some x reason it is not yet complete. There are several things which are running into my life right now out of them on is to update this blog on regular bases to get align with things.&lt;/p>
&lt;h2 id="pending-posts">Pending Posts&lt;/h2>
&lt;p>This blog came to life again due to dgplug summer training where we were taught to write blog post about things you are doing or learning(PS: I am yet to read logs to that class :p).&lt;/p>
&lt;ul>
&lt;li>Although I was thinking to update this as regularly as much as possible even before the training started I had planned to write down as many as things possible starting from the birthday post. I am yet to write that which would be up soon.&lt;/li>
&lt;li>I need to coverup summer training so this time I don&amp;rsquo;t get leave behind many.&lt;/li>
&lt;li>One of the biggest confusion I have is about my career, as of now I am working as Front End Developer but I think I can&amp;rsquo;t do that for whole life moreover I don&amp;rsquo;t want to. I remember my college when I was not even aware about properties of body and div:P&lt;/li>
&lt;li>My competitive coding is also left behind, because of all the things around and me. I should work on that to asap tp get things align.&lt;/li>
&lt;/ul></description></item></channel></rss>