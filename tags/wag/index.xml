<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>wag on Everyone Has a Story</title>
    <link>https://BhaveshSGupta.me/tags/wag/</link>
    <description>Recent content in wag on Everyone Has a Story</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 25 Aug 2019 16:57:46 +0530</lastBuildDate>
    
	<atom:link href="https://BhaveshSGupta.me/tags/wag/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Another Attempt at Wag3</title>
      <link>https://BhaveshSGupta.me/blog/another-attempt-at-wag3/</link>
      <pubDate>Sun, 25 Aug 2019 16:57:46 +0530</pubDate>
      
      <guid>https://BhaveshSGupta.me/blog/another-attempt-at-wag3/</guid>
      <description>Until now we had done as of following code. We would create couples of more functions which would help us in managing our application. As discussed earlier we would now we creating different directories and files present inside .git directory along with directory itself. More or less we would something like following directory structure after doing wag init
 .git is the git directory itself, which contains:  .git/objects/ : the object store, which weâ€™ll introduce in the next section.</description>
    </item>
    
    <item>
      <title>Another Attempt at Wag 2</title>
      <link>https://BhaveshSGupta.me/blog/another-attempt-at-wag-2/</link>
      <pubDate>Sat, 24 Aug 2019 15:32:32 +0530</pubDate>
      
      <guid>https://BhaveshSGupta.me/blog/another-attempt-at-wag-2/</guid>
      <description>Last time we had created cmd_init(args) function. We add more functionality to cmd_init(args).
This was our code till last time.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  import sys import argparse argparser = argparse.ArgumentParser(description=&amp;#34;Another Content Tracker&amp;#34;) argsubparsers = argparser.add_subparsers(title=&amp;#34;Commands&amp;#34;, dest=&amp;#34;command&amp;#34;) argsubparsers.required = True argsp = argsubparsers.add_parser(&amp;#34;init&amp;#34;, help=&amp;#34;Initialize a new, empty repository.&amp;#34;) argsp.add_argument(&amp;#34;path&amp;#34;, metavar=&amp;#34;directory&amp;#34;, nargs=&amp;#34;?&amp;#34;, default=&amp;#34;.&amp;#34;, help=&amp;#34;Where to create the repository.</description>
    </item>
    
    <item>
      <title>Another Attempt to write a git</title>
      <link>https://BhaveshSGupta.me/blog/another-attempt-at-wag/</link>
      <pubDate>Thu, 22 Aug 2019 20:50:56 +0530</pubDate>
      
      <guid>https://BhaveshSGupta.me/blog/another-attempt-at-wag/</guid>
      <description>Second Try We would be trying to create a mini git clone from this tutorial. I aspect this to go long. In general git is awesome source code manager which is wieldy use.
So first we would be creating a lib file and executing file.
Let&amp;rsquo;s create a file called wag which would have following code.
1 2 3 4  #!/usr/bin/env python3 import libwag libwag.main()   Then we would create another file which would be libwag.</description>
    </item>
    
  </channel>
</rss>